{"ast":null,"code":"var _jsxFileName = \"/Users/perry/Desktop/budget_app/src/context/AppContext.js\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useReducer } from \"react\";\nimport Swal from \"sweetalert2\"; // 5. The reducer - this is used to update the state, based on the action\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AppReducer = (state, action) => {\n  let budget = 0;\n\n  switch (action.type) {\n    case \"ADD_EXPENSE\":\n      let total_budget = 0;\n      total_budget = state.expenses.reduce((previousExp, currentExp) => {\n        return previousExp + currentExp.cost;\n      }, 0);\n      total_budget = total_budget + action.payload.cost;\n      action.type = \"DONE\";\n\n      if (total_budget <= state.budget) {\n        total_budget = 0;\n        state.expenses.map(currentExp => {\n          if (currentExp.name === action.payload.name) {\n            currentExp.cost = action.payload.cost + currentExp.cost;\n          }\n\n          return currentExp;\n        });\n        return { ...state\n        };\n      } else {\n        Swal.fire({\n          position: \"top\",\n          title: \"Cannot increase the allocation!\",\n          text: \"Out of funds\",\n          icon: \"error\"\n        });\n        alert(\"Cannot increase the allocation! Out of funds!\");\n        return { ...state\n        };\n      }\n\n    case \"RED_EXPENSE\":\n      const red_expenses = state.expenses.map(currentExp => {\n        if (currentExp.name === action.payload.name && currentExp.cost - action.payload.cost >= 0) {\n          currentExp.cost = currentExp.cost - action.payload.cost;\n          budget = state.budget + action.payload.cost;\n        }\n\n        return currentExp;\n      });\n      action.type = \"DONE\";\n      return { ...state,\n        expenses: [...red_expenses]\n      };\n\n    case \"DELETE_EXPENSE\":\n      action.type = \"DONE\";\n      state.expenses.map(currentExp => {\n        if (currentExp.name === action.payload) {\n          budget = state.budget + currentExp.cost;\n          currentExp.cost = 0;\n        }\n\n        return currentExp;\n      });\n      action.type = \"DONE\";\n      return { ...state,\n        budget\n      };\n\n    case \"SET_BUDGET\":\n      action.type = \"DONE\";\n      state.budget = action.payload;\n      return { ...state\n      };\n\n    case \"CHG_CURRENCY\":\n      action.type = \"DONE\";\n      state.currency = action.payload;\n      return { ...state\n      };\n\n    default:\n      return state;\n  }\n}; // 1. Sets the initial state when the app loads\n\n_c = AppReducer;\nconst initialState = {\n  budget: 150000,\n  expenses: [{\n    id: \"Marketing\",\n    name: \"Marketing\",\n    cost: 50\n  }, {\n    id: \"Finance\",\n    name: \"Finance\",\n    cost: 300\n  }, {\n    id: \"Sales\",\n    name: \"Sales\",\n    cost: 70\n  }, {\n    id: \"Human Resource\",\n    name: \"Human Resource\",\n    cost: 40\n  }, {\n    id: \"IT\",\n    name: \"IT\",\n    cost: 500\n  }, {\n    id: \"Engineering\",\n    name: \"Engineering\",\n    cost: 210\n  }],\n  currency: \"£\"\n}; // 2. Creates the context this is the thing our components import and use to get the state\n\nexport const AppContext = /*#__PURE__*/createContext(); // 3. Provider component - wraps the components we want to give access to the state\n// Accepts the children, which are the nested(wrapped) components\n\nexport const AppProvider = props => {\n  _s();\n\n  // 4. Sets up the app state. takes a reducer, and an initial state\n  const [state, dispatch] = useReducer(AppReducer, initialState);\n  let remaining = 0;\n\n  if (state.expenses) {\n    const totalExpenses = state.expenses.reduce((total, item) => {\n      return total = total + item.cost;\n    }, 0);\n    remaining = state.budget - totalExpenses;\n  }\n\n  return /*#__PURE__*/_jsxDEV(AppContext.Provider, {\n    value: {\n      expenses: state.expenses,\n      budget: state.budget,\n      remaining: remaining,\n      dispatch,\n      currency: state.currency\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 123,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AppProvider, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n\n_c2 = AppProvider;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"AppReducer\");\n$RefreshReg$(_c2, \"AppProvider\");","map":{"version":3,"names":["React","createContext","useReducer","Swal","AppReducer","state","action","budget","type","total_budget","expenses","reduce","previousExp","currentExp","cost","payload","map","name","fire","position","title","text","icon","alert","red_expenses","currency","initialState","id","AppContext","AppProvider","props","dispatch","remaining","totalExpenses","total","item","children"],"sources":["/Users/perry/Desktop/budget_app/src/context/AppContext.js"],"sourcesContent":["import React, { createContext, useReducer } from \"react\";\nimport Swal from \"sweetalert2\";\n\n// 5. The reducer - this is used to update the state, based on the action\nexport const AppReducer = (state, action) => {\n  let budget = 0;\n\n  switch (action.type) {\n    case \"ADD_EXPENSE\":\n      let total_budget = 0;\n      total_budget = state.expenses.reduce((previousExp, currentExp) => {\n        return previousExp + currentExp.cost;\n      }, 0);\n      total_budget = total_budget + action.payload.cost;\n      action.type = \"DONE\";\n\n      if (total_budget <= state.budget) {\n        total_budget = 0;\n        state.expenses.map((currentExp) => {\n          if (currentExp.name === action.payload.name) {\n            currentExp.cost = action.payload.cost + currentExp.cost;\n          }\n          return currentExp;\n        });\n        return {\n          ...state,\n        };\n      } else {\n\n        Swal.fire({\n          position: \"top\",\n          title: \"Cannot increase the allocation!\",\n          text: \"Out of funds\",\n          icon: \"error\",\n        });\n\n        alert(\"Cannot increase the allocation! Out of funds!\");\n        return {\n          ...state,\n        };\n      }\n    case \"RED_EXPENSE\":\n      const red_expenses = state.expenses.map((currentExp) => {\n        if (\n          currentExp.name === action.payload.name &&\n          currentExp.cost - action.payload.cost >= 0\n        ) {\n          currentExp.cost = currentExp.cost - action.payload.cost;\n          budget = state.budget + action.payload.cost;\n        }\n        return currentExp;\n      });\n      action.type = \"DONE\";\n      return {\n        ...state,\n        expenses: [...red_expenses],\n      };\n    case \"DELETE_EXPENSE\":\n      action.type = \"DONE\";\n      state.expenses.map((currentExp) => {\n        if (currentExp.name === action.payload) {\n          budget = state.budget + currentExp.cost;\n          currentExp.cost = 0;\n        }\n        return currentExp;\n      });\n      action.type = \"DONE\";\n      return {\n        ...state,\n        budget,\n      };\n    case \"SET_BUDGET\":\n      action.type = \"DONE\";\n      state.budget = action.payload;\n      return {\n        ...state,\n      };\n    case \"CHG_CURRENCY\":\n      action.type = \"DONE\";\n      state.currency = action.payload;\n      return {\n        ...state,\n      };\n\n    default:\n      return state;\n  }\n};\n\n// 1. Sets the initial state when the app loads\nconst initialState = {\n  budget: 150000,\n  expenses: [\n    { id: \"Marketing\", name: \"Marketing\", cost: 50 },\n    { id: \"Finance\", name: \"Finance\", cost: 300 },\n    { id: \"Sales\", name: \"Sales\", cost: 70 },\n    { id: \"Human Resource\", name: \"Human Resource\", cost: 40 },\n    { id: \"IT\", name: \"IT\", cost: 500 },\n    { id: \"Engineering\", name: \"Engineering\", cost: 210 },\n  ],\n\n  currency: \"£\",\n};\n\n// 2. Creates the context this is the thing our components import and use to get the state\nexport const AppContext = createContext();\n\n// 3. Provider component - wraps the components we want to give access to the state\n// Accepts the children, which are the nested(wrapped) components\nexport const AppProvider = (props) => {\n  // 4. Sets up the app state. takes a reducer, and an initial state\n  const [state, dispatch] = useReducer(AppReducer, initialState);\n  let remaining = 0;\n\n  if (state.expenses) {\n    const totalExpenses = state.expenses.reduce((total, item) => {\n      return (total = total + item.cost);\n    }, 0);\n    remaining = state.budget - totalExpenses;\n  }\n\n  return (\n    <AppContext.Provider\n      value={{\n        expenses: state.expenses,\n        budget: state.budget,\n        remaining: remaining,\n        dispatch,\n        currency: state.currency,\n      }}\n    >\n      {props.children}\n    </AppContext.Provider>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}